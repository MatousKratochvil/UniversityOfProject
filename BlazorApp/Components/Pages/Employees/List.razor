@page "/employees"
@rendermode InteractiveServer
@using Core.Extensions
@using HumanResources.Abstractions
@using HumanResources.Entities
@using HumanResources.Formatters
@using HumanResources.Queries
@using MediatR
@inject NavigationManager NavigationManager
@inject IHumanResourceFactory HumanResourceFactory
@inject ISender Sender

<PageTitle>Employees</PageTitle>
@* *@
@* <CityInput @bind-Value="_city" Validator="(inputs, _) => Guard.ThrowWhenNullOrWhiteSpace(inputs)"/> *@

<button type="button">
    <NavLink class="button is-link is-outlined" href="employees/create">
        <span class="icon is-link">
            <i class="fas fa-plus"></i>
        </span>
        <span>Create</span>
    </NavLink>
</button>

<table class="table is-hoverable is-fullwidth">
    <thead>
    <tr>
        <th>Name</th>
        <th>City</th>
        <th>Contract</th>
        <th>Period</th>
        <th>Department</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var employee in _employees)
    {
        <tr data-id="@employee.Id.Id">
            <td>@employee.Person.Name.Format(PersonNameCombinedFormatter.Instance)</td>
            <td>@employee.Person.ContactInformation.Address.City.Value</td>
            <td>@employee.Contract.GetType().Name</td>
            <td>@employee.Contract.Period.Format(PeriodCombinedFormatter.Instance)</td>
            <td>@employee.Contract.Department.Name.Value</td>
            <td>
                <div class="buttons are-small">
                    <button type="button" title="Edit" class="button is-link is-outlined" @onclick="e => ToDetail(employee.Id)">
                        <span class="icon is-link">
                            <i class="fas fa-edit"></i>
                        </span>
                    </button>
                </div>
            </td>
        </tr>
    }
    </tbody>
</table>

@code {
    private IList<Employee> _employees = new List<Employee>();

    private void ToDetail(EmployeeId e)
    {
        NavigationManager.NavigateTo($"/employees/{e.Id}");
    }

    protected override async Task OnInitializedAsync()
    {
        var query = await Sender.Send(new EmployeeTableQuery(0, 50));
        _employees = query.Employees;
    }

}